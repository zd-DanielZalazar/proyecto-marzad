<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/sga/marzad/controller/AltaCarreraPaso2Controller.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sga/marzad/controller/AltaCarreraPaso2Controller.java" />
              <option name="originalContent" value="package com.sga.marzad.controller;&#10;&#10;import com.sga.marzad.dao.DocenteDAO;&#10;import com.sga.marzad.model.Docente;&#10;import com.sga.marzad.model.NuevaCarreraWizardData;&#10;import com.sga.marzad.model.NuevaCarreraWizardData.MateriaWizard;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;import java.util.List;&#10;&#10;public class AltaCarreraPaso2Controller {&#10;&#10;    @FXML private Label lblCarreraInfo;&#10;    @FXML private TextField txtNombreMateria;&#10;    @FXML private ComboBox&lt;Integer&gt; comboAnio;&#10;    @FXML private ComboBox&lt;Docente&gt; comboDocente;&#10;    @FXML private ComboBox&lt;String&gt; comboDia;&#10;    @FXML private ComboBox&lt;String&gt; comboHora;&#10;    @FXML private TableView&lt;MateriaWizard&gt; tablaMaterias;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;MateriaWizard, Integer&gt; colAnio;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colDocente;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colDia;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colHora;&#10;    @FXML private TableColumn&lt;MateriaWizard, Void&gt; colAcciones;&#10;&#10;    private NuevaCarreraWizardData wizardData;&#10;    private ObservableList&lt;MateriaWizard&gt; materiasObservable = FXCollections.observableArrayList();&#10;    private List&lt;Docente&gt; docentesDisponibles;&#10;    private Runnable onAnterior;&#10;    private Runnable onSiguiente;&#10;&#10;    public void setWizardData(NuevaCarreraWizardData data) {&#10;        this.wizardData = data;&#10;        lblCarreraInfo.setText(&quot;Carrera: &quot; + data.getNombreCarrera() + &quot; | Duración: &quot; + data.getDuracionAnios() + &quot; años&quot;);&#10;&#10;        comboAnio.getItems().clear();&#10;        for (int i = 1; i &lt;= data.getDuracionAnios(); i++) {&#10;            comboAnio.getItems().add(i);&#10;        }&#10;&#10;        materiasObservable.setAll(data.getMaterias());&#10;        tablaMaterias.setItems(materiasObservable);&#10;    }&#10;&#10;    public void setOnAnterior(Runnable r) { this.onAnterior = r; }&#10;    public void setOnSiguiente(Runnable r) { this.onSiguiente = r; }&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // --- Cargar docentes desde la base ---&#10;        docentesDisponibles = DocenteDAO.obtenerTodos();&#10;        comboDocente.setItems(FXCollections.observableArrayList(docentesDisponibles));&#10;        comboDocente.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Docente docente, boolean empty) {&#10;                super.updateItem(docente, empty);&#10;                setText((empty || docente == null) ? &quot;&quot; : docente.getNombre() + &quot; &quot; + docente.getApellido());&#10;            }&#10;        });&#10;        comboDocente.setButtonCell(new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Docente docente, boolean empty) {&#10;                super.updateItem(docente, empty);&#10;                setText((empty || docente == null) ? &quot;&quot; : docente.getNombre() + &quot; &quot; + docente.getApellido());&#10;            }&#10;        });&#10;&#10;        // --- Día y hora ---&#10;        comboDia.setItems(FXCollections.observableArrayList(&quot;Lunes&quot;, &quot;Martes&quot;, &quot;Miércoles&quot;, &quot;Jueves&quot;, &quot;Viernes&quot;));&#10;        ObservableList&lt;String&gt; horas = FXCollections.observableArrayList();&#10;        for (int h = 8; h &lt;= 21; h++) {&#10;            horas.add(String.format(&quot;%02d:00&quot;, h));&#10;            horas.add(String.format(&quot;%02d:30&quot;, h));&#10;        }&#10;        horas.add(&quot;22:00&quot;);&#10;        comboHora.setItems(horas);&#10;&#10;        // --- Tabla materias ---&#10;        colNombre.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().nombre));&#10;        colAnio.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleIntegerProperty(data.getValue().anio).asObject());&#10;        colDocente.setCellValueFactory(data -&gt; {&#10;            int docenteId = data.getValue().docenteId;&#10;            Docente docente = docentesDisponibles.stream()&#10;                    .filter(d -&gt; d.getId() == docenteId)&#10;                    .findFirst()&#10;                    .orElse(null);&#10;            return new javafx.beans.property.SimpleStringProperty(docente != null ? docente.getNombre() + &quot; &quot; + docente.getApellido() : &quot;&quot;);&#10;        });&#10;        colDia.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().dia));&#10;        colHora.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().hora));&#10;        colAcciones.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            {&#10;                btnEliminar.setOnAction(e -&gt; {&#10;                    MateriaWizard mat = getTableView().getItems().get(getIndex());&#10;                    materiasObservable.remove(mat);&#10;                    wizardData.getMaterias().remove(mat);&#10;                });&#10;            }&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : btnEliminar);&#10;            }&#10;        });&#10;&#10;        tablaMaterias.setItems(materiasObservable);&#10;    }&#10;&#10;    @FXML&#10;    private void onAgregarMateria() {&#10;        String nombre = txtNombreMateria.getText().trim();&#10;        Integer anio = comboAnio.getValue();&#10;        Docente docente = comboDocente.getValue();&#10;        String dia = comboDia.getValue();&#10;        String hora = comboHora.getValue();&#10;&#10;        if (nombre.isEmpty() || anio == null || docente == null || dia == null || hora == null) {&#10;            showAlert(&quot;Todos los campos son obligatorios.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validar que no se repita nombre en el mismo año&#10;        for (MateriaWizard mat : materiasObservable) {&#10;            if (mat.nombre.equalsIgnoreCase(nombre) &amp;&amp; mat.anio == anio) {&#10;                showAlert(&quot;Ya existe una materia con ese nombre en el mismo año.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        MateriaWizard nueva = new MateriaWizard();&#10;        nueva.nombre = nombre;&#10;        nueva.anio = anio;&#10;        nueva.docenteId = docente.getId(); // &lt;&lt;---- IMPORTANTE: guarda el ID&#10;        nueva.dia = dia;&#10;        nueva.hora = hora;&#10;&#10;        materiasObservable.add(nueva);&#10;        wizardData.getMaterias().add(nueva);&#10;&#10;        onLimpiarCampos();&#10;    }&#10;&#10;    @FXML&#10;    private void onLimpiarCampos() {&#10;        txtNombreMateria.clear();&#10;        comboAnio.getSelectionModel().clearSelection();&#10;        comboDocente.getSelectionModel().clearSelection();&#10;        comboDia.getSelectionModel().clearSelection();&#10;        comboHora.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void onAnterior() {&#10;        if (onAnterior != null) onAnterior.run();&#10;    }&#10;&#10;    @FXML&#10;    private void onSiguiente() {&#10;        if (materiasObservable.isEmpty()) {&#10;            showAlert(&quot;Debe agregar al menos una materia para continuar.&quot;);&#10;            return;&#10;        }&#10;        if (onSiguiente != null) onSiguiente.run();&#10;    }&#10;&#10;    private void showAlert(String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR, mensaje, ButtonType.OK);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sga.marzad.controller;&#10;&#10;import com.sga.marzad.dao.DocenteDAO;&#10;import com.sga.marzad.model.Docente;&#10;import com.sga.marzad.model.NuevaCarreraWizardData;&#10;import com.sga.marzad.model.NuevaCarreraWizardData.MateriaWizard;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;import java.util.List;&#10;&#10;public class AltaCarreraPaso2Controller {&#10;&#10;    @FXML private Label lblCarreraInfo;&#10;    @FXML private TextField txtNombreMateria;&#10;    @FXML private ComboBox&lt;Integer&gt; comboAnio;&#10;    @FXML private ComboBox&lt;Docente&gt; comboDocente;&#10;    @FXML private ComboBox&lt;String&gt; comboDia;&#10;    @FXML private ComboBox&lt;String&gt; comboHora;&#10;    @FXML private TableView&lt;MateriaWizard&gt; tablaMaterias;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;MateriaWizard, Integer&gt; colAnio;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colDocente;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colDia;&#10;    @FXML private TableColumn&lt;MateriaWizard, String&gt; colHora;&#10;    @FXML private TableColumn&lt;MateriaWizard, Void&gt; colAcciones;&#10;&#10;    private NuevaCarreraWizardData wizardData;&#10;    private ObservableList&lt;MateriaWizard&gt; materiasObservable = FXCollections.observableArrayList();&#10;    private List&lt;Docente&gt; docentesDisponibles;&#10;    private Runnable onAnterior;&#10;    private Runnable onSiguiente;&#10;&#10;    public void setWizardData(NuevaCarreraWizardData data) {&#10;        this.wizardData = data;&#10;        lblCarreraInfo.setText(&quot;Carrera: &quot; + data.getNombreCarrera() + &quot; | Duración: &quot; + data.getDuracionAnios() + &quot; años&quot;);&#10;&#10;        comboAnio.getItems().clear();&#10;        for (int i = 1; i &lt;= data.getDuracionAnios(); i++) {&#10;            comboAnio.getItems().add(i);&#10;        }&#10;&#10;        materiasObservable.setAll(data.getMaterias());&#10;        tablaMaterias.setItems(materiasObservable);&#10;    }&#10;&#10;    public void setOnAnterior(Runnable r) { this.onAnterior = r; }&#10;    public void setOnSiguiente(Runnable r) { this.onSiguiente = r; }&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // --- Cargar docentes desde la base ---&#10;        docentesDisponibles = DocenteDAO.obtenerTodos();&#10;        comboDocente.setItems(FXCollections.observableArrayList(docentesDisponibles));&#10;        comboDocente.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Docente docente, boolean empty) {&#10;                super.updateItem(docente, empty);&#10;                setText((empty || docente == null) ? &quot;&quot; : docente.getNombre() + &quot; &quot; + docente.getApellido());&#10;            }&#10;        });&#10;        comboDocente.setButtonCell(new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(Docente docente, boolean empty) {&#10;                super.updateItem(docente, empty);&#10;                setText((empty || docente == null) ? &quot;&quot; : docente.getNombre() + &quot; &quot; + docente.getApellido());&#10;            }&#10;        });&#10;&#10;        // --- Día y hora ---&#10;        comboDia.setItems(FXCollections.observableArrayList(&quot;Lunes&quot;, &quot;Martes&quot;, &quot;Miércoles&quot;, &quot;Jueves&quot;, &quot;Viernes&quot;));&#10;        ObservableList&lt;String&gt; horas = FXCollections.observableArrayList();&#10;        for (int h = 8; h &lt;= 21; h++) {&#10;            horas.add(String.format(&quot;%02d:00&quot;, h));&#10;            horas.add(String.format(&quot;%02d:30&quot;, h));&#10;        }&#10;        horas.add(&quot;22:00&quot;);&#10;        comboHora.setItems(horas);&#10;&#10;        // --- Tabla materias ---&#10;        colNombre.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().getNombre()));&#10;        colAnio.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleIntegerProperty(data.getValue().getAnio()).asObject());&#10;        colDocente.setCellValueFactory(data -&gt; {&#10;            int docenteId = data.getValue().getDocenteId();&#10;            Docente docente = docentesDisponibles.stream()&#10;                    .filter(d -&gt; d.getId() == docenteId)&#10;                    .findFirst()&#10;                    .orElse(null);&#10;            return new javafx.beans.property.SimpleStringProperty(docente != null ? docente.getNombre() + &quot; &quot; + docente.getApellido() : &quot;&quot;);&#10;        });&#10;        colDia.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().getDia()));&#10;        colHora.setCellValueFactory(data -&gt; new javafx.beans.property.SimpleStringProperty(data.getValue().getHora()));&#10;        colAcciones.setCellFactory(col -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            {&#10;                btnEliminar.setOnAction(e -&gt; {&#10;                    MateriaWizard mat = getTableView().getItems().get(getIndex());&#10;                    materiasObservable.remove(mat);&#10;                    wizardData.getMaterias().remove(mat);&#10;                });&#10;            }&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : btnEliminar);&#10;            }&#10;        });&#10;&#10;        tablaMaterias.setItems(materiasObservable);&#10;    }&#10;&#10;    @FXML&#10;    private void onAgregarMateria() {&#10;        String nombre = txtNombreMateria.getText().trim();&#10;        Integer anio = comboAnio.getValue();&#10;        Docente docente = comboDocente.getValue();&#10;        String dia = comboDia.getValue();&#10;        String hora = comboHora.getValue();&#10;&#10;        if (nombre.isEmpty() || anio == null || docente == null || dia == null || hora == null) {&#10;            showAlert(&quot;Todos los campos son obligatorios.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validar que no se repita nombre en el mismo año&#10;        for (MateriaWizard mat : materiasObservable) {&#10;            if (mat.getNombre().equalsIgnoreCase(nombre) &amp;&amp; mat.getAnio() == anio) {&#10;                showAlert(&quot;Ya existe una materia con ese nombre en el mismo año.&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        MateriaWizard nueva = new MateriaWizard();&#10;        nueva.setNombre(nombre);&#10;        nueva.setAnio(anio);&#10;        nueva.setDocenteId(docente.getId()); // &lt;&lt;---- IMPORTANTE: guarda el ID&#10;        nueva.setDia(dia);&#10;        nueva.setHora(hora);&#10;&#10;        materiasObservable.add(nueva);&#10;        wizardData.getMaterias().add(nueva);&#10;&#10;        onLimpiarCampos();&#10;    }&#10;&#10;    @FXML&#10;    private void onLimpiarCampos() {&#10;        txtNombreMateria.clear();&#10;        comboAnio.getSelectionModel().clearSelection();&#10;        comboDocente.getSelectionModel().clearSelection();&#10;        comboDia.getSelectionModel().clearSelection();&#10;        comboHora.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    @FXML&#10;    private void onAnterior() {&#10;        if (onAnterior != null) onAnterior.run();&#10;    }&#10;&#10;    @FXML&#10;    private void onSiguiente() {&#10;        if (materiasObservable.isEmpty()) {&#10;            showAlert(&quot;Debe agregar al menos una materia para continuar.&quot;);&#10;            return;&#10;        }&#10;        if (onSiguiente != null) onSiguiente.run();&#10;    }&#10;&#10;    private void showAlert(String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR, mensaje, ButtonType.OK);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sga/marzad/controller/AltaCarreraPaso3Controller.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sga/marzad/controller/AltaCarreraPaso3Controller.java" />
              <option name="originalContent" value="package com.sga.marzad.controller;&#10;&#10;import com.sga.marzad.model.NuevaCarreraWizardData;&#10;import com.sga.marzad.model.NuevaCarreraWizardData.MateriaWizard;&#10;import javafx.collections.FXCollections;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class AltaCarreraPaso3Controller {&#10;    @FXML private ListView&lt;MateriaWizard&gt; listMaterias;&#10;    @FXML private ListView&lt;MateriaWizard&gt; listCorrelativasPosibles;&#10;    @FXML private ListView&lt;MateriaWizard&gt; listCorrelativasAsignadas;&#10;&#10;    private NuevaCarreraWizardData wizardData;&#10;    private List&lt;MateriaWizard&gt; materias;&#10;    private MateriaWizard materiaSeleccionada;&#10;    private Runnable onAnterior, onSiguiente;&#10;&#10;    public void setWizardData(NuevaCarreraWizardData data) {&#10;        this.wizardData = data;&#10;        materias = data.getMaterias();&#10;        listMaterias.setItems(FXCollections.observableArrayList(materias));&#10;        listMaterias.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#10;            @Override protected void updateItem(MateriaWizard item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setText((empty || item == null) ? null : item.nombre + &quot; (&quot; + item.anio + &quot;°)&quot;);&#10;            }&#10;        });&#10;        listMaterias.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -&gt; {&#10;            materiaSeleccionada = newSel;&#10;            actualizarCorrelativas();&#10;        });&#10;        if (!materias.isEmpty()) listMaterias.getSelectionModel().selectFirst();&#10;    }&#10;    public void setOnAnterior(Runnable r) { this.onAnterior = r; }&#10;    public void setOnSiguiente(Runnable r) { this.onSiguiente = r; }&#10;&#10;    private void actualizarCorrelativas() {&#10;        if (materiaSeleccionada == null) return;&#10;        List&lt;MateriaWizard&gt; posibles = materias.stream()&#10;                .filter(m -&gt; m.anio &lt; materiaSeleccionada.anio &amp;&amp; !m.equals(materiaSeleccionada))&#10;                .collect(Collectors.toList());&#10;        List&lt;MateriaWizard&gt; asignadas = new ArrayList&lt;&gt;();&#10;        for (Integer corrId : materiaSeleccionada.correlativas)&#10;            materias.stream().filter(m -&gt; m.hashCode() == corrId).findFirst().ifPresent(asignadas::add);&#10;        List&lt;MateriaWizard&gt; noAsignadas = posibles.stream()&#10;                .filter(m -&gt; !materiaSeleccionada.correlativas.contains(m.hashCode()))&#10;                .collect(Collectors.toList());&#10;        listCorrelativasPosibles.setItems(FXCollections.observableArrayList(noAsignadas));&#10;        listCorrelativasAsignadas.setItems(FXCollections.observableArrayList(asignadas));&#10;    }&#10;    @FXML private void onAgregarCorrelativa() {&#10;        MateriaWizard sel = listCorrelativasPosibles.getSelectionModel().getSelectedItem();&#10;        if (sel != null &amp;&amp; materiaSeleccionada != null &amp;&amp; !materiaSeleccionada.correlativas.contains(sel.hashCode())) {&#10;            materiaSeleccionada.correlativas.add(sel.hashCode());&#10;            actualizarCorrelativas();&#10;        }&#10;    }&#10;    @FXML private void onQuitarCorrelativa() {&#10;        MateriaWizard sel = listCorrelativasAsignadas.getSelectionModel().getSelectedItem();&#10;        if (sel != null &amp;&amp; materiaSeleccionada != null) {&#10;            materiaSeleccionada.correlativas.remove(Integer.valueOf(sel.hashCode()));&#10;            actualizarCorrelativas();&#10;        }&#10;    }&#10;    @FXML private void onAnterior() { if (onAnterior != null) onAnterior.run(); }&#10;    @FXML private void onSiguiente() { if (onSiguiente != null) onSiguiente.run(); }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sga.marzad.controller;&#13;&#10;&#13;&#10;import com.sga.marzad.model.NuevaCarreraWizardData;&#13;&#10;import com.sga.marzad.model.NuevaCarreraWizardData.MateriaWizard;&#13;&#10;import javafx.collections.FXCollections;&#13;&#10;import javafx.fxml.FXML;&#13;&#10;import javafx.scene.control.*;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;public class AltaCarreraPaso3Controller {&#13;&#10;    @FXML private ListView&lt;MateriaWizard&gt; listMaterias;&#13;&#10;    @FXML private ListView&lt;MateriaWizard&gt; listCorrelativasPosibles;&#13;&#10;    @FXML private ListView&lt;MateriaWizard&gt; listCorrelativasAsignadas;&#13;&#10;&#13;&#10;    private NuevaCarreraWizardData wizardData;&#13;&#10;    private List&lt;MateriaWizard&gt; materias;&#13;&#10;    private MateriaWizard materiaSeleccionada;&#13;&#10;    private Runnable onAnterior, onSiguiente;&#13;&#10;&#13;&#10;    public void setWizardData(NuevaCarreraWizardData data) {&#13;&#10;        this.wizardData = data;&#13;&#10;        materias = data.getMaterias();&#13;&#10;        listMaterias.setItems(FXCollections.observableArrayList(materias));&#13;&#10;        listMaterias.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#13;&#10;            @Override protected void updateItem(MateriaWizard item, boolean empty) {&#13;&#10;                super.updateItem(item, empty);&#13;&#10;                setText((empty || item == null) ? null : item.getNombre() + &quot; (&quot; + item.getAnio() + &quot;°)&quot;);&#13;&#10;            }&#13;&#10;        });&#13;&#10;        listMaterias.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -&gt; {&#13;&#10;            materiaSeleccionada = newSel;&#13;&#10;            actualizarCorrelativas();&#13;&#10;        });&#13;&#10;        if (!materias.isEmpty()) listMaterias.getSelectionModel().selectFirst();&#13;&#10;    }&#13;&#10;    public void setOnAnterior(Runnable r) { this.onAnterior = r; }&#13;&#10;    public void setOnSiguiente(Runnable r) { this.onSiguiente = r; }&#13;&#10;&#13;&#10;    private void actualizarCorrelativas() {&#13;&#10;        if (materiaSeleccionada == null) return;&#13;&#10;        List&lt;MateriaWizard&gt; posibles = materias.stream()&#13;&#10;                .filter(m -&gt; m.getAnio() &lt; materiaSeleccionada.getAnio() &amp;&amp; !m.equals(materiaSeleccionada))&#13;&#10;                .collect(Collectors.toList());&#13;&#10;        List&lt;MateriaWizard&gt; asignadas = new ArrayList&lt;&gt;();&#13;&#10;        for (Integer corrId : materiaSeleccionada.getCorrelativas())&#13;&#10;            materias.stream().filter(m -&gt; m.hashCode() == corrId).findFirst().ifPresent(asignadas::add);&#13;&#10;        List&lt;MateriaWizard&gt; noAsignadas = posibles.stream()&#13;&#10;                .filter(m -&gt; !materiaSeleccionada.getCorrelativas().contains(m.hashCode()))&#13;&#10;                .collect(Collectors.toList());&#13;&#10;        listCorrelativasPosibles.setItems(FXCollections.observableArrayList(noAsignadas));&#13;&#10;        listCorrelativasAsignadas.setItems(FXCollections.observableArrayList(asignadas));&#13;&#10;    }&#13;&#10;    @FXML private void onAgregarCorrelativa() {&#13;&#10;        MateriaWizard sel = listCorrelativasPosibles.getSelectionModel().getSelectedItem();&#13;&#10;        if (sel != null &amp;&amp; materiaSeleccionada != null &amp;&amp; !materiaSeleccionada.getCorrelativas().contains(sel.hashCode())) {&#13;&#10;            materiaSeleccionada.getCorrelativas().add(sel.hashCode());&#13;&#10;            actualizarCorrelativas();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    @FXML private void onQuitarCorrelativa() {&#13;&#10;        MateriaWizard sel = listCorrelativasAsignadas.getSelectionModel().getSelectedItem();&#13;&#10;        if (sel != null &amp;&amp; materiaSeleccionada != null) {&#13;&#10;            materiaSeleccionada.getCorrelativas().remove(Integer.valueOf(sel.hashCode()));&#13;&#10;            actualizarCorrelativas();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    @FXML private void onAnterior() { if (onAnterior != null) onAnterior.run(); }&#13;&#10;    @FXML private void onSiguiente() { if (onSiguiente != null) onSiguiente.run(); }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/sga/marzad/model/NuevaCarreraWizardData.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/sga/marzad/model/NuevaCarreraWizardData.java" />
              <option name="originalContent" value="package com.sga.marzad.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class NuevaCarreraWizardData {&#10;    private String nombreCarrera;&#10;    private String descripcionCarrera;&#10;    private int duracionAnios;&#10;    private List&lt;MateriaWizard&gt; materias;&#10;&#10;    public NuevaCarreraWizardData() {&#10;        materias = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getters y setters principales&#10;    public String getNombreCarrera() { return nombreCarrera; }&#10;    public void setNombreCarrera(String nombreCarrera) { this.nombreCarrera = nombreCarrera; }&#10;&#10;    public String getDescripcionCarrera() { return descripcionCarrera; }&#10;    public void setDescripcionCarrera(String descripcionCarrera) { this.descripcionCarrera = descripcionCarrera; }&#10;&#10;    public int getDuracionAnios() { return duracionAnios; }&#10;    public void setDuracionAnios(int duracionAnios) { this.duracionAnios = duracionAnios; }&#10;&#10;    public List&lt;MateriaWizard&gt; getMaterias() { return materias; }&#10;    public void setMaterias(List&lt;MateriaWizard&gt; materias) { this.materias = materias; }&#10;&#10;    // Clase interna para las materias agregadas en el wizard&#10;    public static class MateriaWizard {&#10;        private String nombre;&#10;        private int anio;&#10;        private int docenteId;&#10;        private String dia;&#10;        private String hora;&#10;&#10;        public MateriaWizard() {}&#10;        public MateriaWizard(String nombre, int anio, int docenteId, String dia, String hora) {&#10;            this.nombre = nombre;&#10;            this.anio = anio;&#10;            this.docenteId = docenteId;&#10;            this.dia = dia;&#10;            this.hora = hora;&#10;        }&#10;&#10;        // -------- GETTERS (AGREGADOS) --------&#10;        public String getNombre() { return nombre; }&#10;        public int getAnio() { return anio; }&#10;        public int getDocenteId() { return docenteId; }&#10;        public String getDia() { return dia; }&#10;        public String getHora() { return hora; }&#10;&#10;        // -------- SETTERS (opcionales) --------&#10;        public void setNombre(String nombre) { this.nombre = nombre; }&#10;        public void setAnio(int anio) { this.anio = anio; }&#10;        public void setDocenteId(int docenteId) { this.docenteId = docenteId; }&#10;        public void setDia(String dia) { this.dia = dia; }&#10;        public void setHora(String hora) { this.hora = hora; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sga.marzad.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class NuevaCarreraWizardData {&#10;    private String nombreCarrera;&#10;    private String descripcionCarrera;&#10;    private int duracionAnios;&#10;    private List&lt;MateriaWizard&gt; materias;&#10;&#10;    public NuevaCarreraWizardData() {&#10;        materias = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getters y setters principales&#10;    public String getNombreCarrera() { return nombreCarrera; }&#10;    public void setNombreCarrera(String nombreCarrera) { this.nombreCarrera = nombreCarrera; }&#10;&#10;    public String getDescripcionCarrera() { return descripcionCarrera; }&#10;    public void setDescripcionCarrera(String descripcionCarrera) { this.descripcionCarrera = descripcionCarrera; }&#10;&#10;    public int getDuracionAnios() { return duracionAnios; }&#10;    public void setDuracionAnios(int duracionAnios) { this.duracionAnios = duracionAnios; }&#10;&#10;    public List&lt;MateriaWizard&gt; getMaterias() { return materias; }&#10;    public void setMaterias(List&lt;MateriaWizard&gt; materias) { this.materias = materias; }&#10;&#10;    // Clase interna para las materias agregadas en el wizard&#10;    public static class MateriaWizard {&#10;        private String nombre;&#10;        private int anio;&#10;        private int docenteId;&#10;        private String dia;&#10;        private String hora;&#10;        // --- nuevos campos y métodos para compatibilidad con Paso4 ---&#10;        private int id;&#10;        private List&lt;Integer&gt; correlativas;&#10;        private int cuatrimestre;&#10;        private int creditos;&#10;&#10;        public MateriaWizard() {&#10;            correlativas = new ArrayList&lt;&gt;();&#10;        }&#10;        public MateriaWizard(String nombre, int anio, int docenteId, String dia, String hora) {&#10;            this();&#10;            this.nombre = nombre;&#10;            this.anio = anio;&#10;            this.docenteId = docenteId;&#10;            this.dia = dia;&#10;            this.hora = hora;&#10;        }&#10;&#10;        // -------- GETTERS (AGREGADOS) --------&#10;        public String getNombre() { return nombre; }&#10;        public int getAnio() { return anio; }&#10;        public int getDocenteId() { return docenteId; }&#10;        public String getDia() { return dia; }&#10;        public String getHora() { return hora; }&#10;        public int getId() { return id; }&#10;        public List&lt;Integer&gt; getCorrelativas() { return correlativas; }&#10;        public int getCuatrimestre() { return cuatrimestre; }&#10;        public int getCreditos() { return creditos; }&#10;&#10;        // -------- SETTERS (opcionales) --------&#10;        public void setNombre(String nombre) { this.nombre = nombre; }&#10;        public void setAnio(int anio) { this.anio = anio; }&#10;        public void setDocenteId(int docenteId) { this.docenteId = docenteId; }&#10;        public void setDia(String dia) { this.dia = dia; }&#10;        public void setHora(String hora) { this.hora = hora; }&#10;        public void setId(int id) { this.id = id; }&#10;        public void setCorrelativas(List&lt;Integer&gt; correlativas) { this.correlativas = correlativas; }&#10;        public void setCuatrimestre(int cuatrimestre) { this.cuatrimestre = cuatrimestre; }&#10;        public void setCreditos(int creditos) { this.creditos = creditos; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>